# model settings
# norm_cfg = dict(type='SyncBN', requires_grad=True)
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    segmentor=dict(
        type='EncoderDecoder',
        backbone=dict(type='ResNetV1c',
                      depth=50,
                      num_stages=4,
                      out_indices=(0, 1, 2, 3),
                      dilations=(1, 1, 2, 4),
                      strides=(1, 2, 1, 1),
                      norm_cfg=norm_cfg,
                      norm_eval=False,
                      style='pytorch',
                      contract_dilation=True,
                      init_cfg=dict(type='Pretrained',
                                    checkpoint='open-mmlab://resnet50_v1c')),
        decode_head=dict(type='ASPPHead',
                         in_channels=2048,
                         in_index=3,
                         channels=512,
                         dilations=(1, 12, 24, 36),
                         dropout_ratio=0.1,
                         num_classes=19,
                         norm_cfg=norm_cfg,
                         align_corners=False,
                         loss_decode=dict(type='CrossEntropyLoss',
                                          use_sigmoid=False,
                                          loss_weight=1.0)),
        # model training and testing settings
        train_cfg=dict(),
        test_cfg=dict(mode='whole')),
    lightnet=dict(in_channels=3,
                  out_channels=3,
                  base_channels=64,
                  norm_cfg=dict(type='BN'),
                  act_cfg=dict(type='ReLU'),
                  num_downsampling=2,
                  dropout_rate=0.5,
                  num_blocks=6,
                  init_cfg=None),
    discriminator=dict(num_classes=19))
